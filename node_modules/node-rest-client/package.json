{
  "author": {
    "name": "Alejandro Alvarez Acero"
  },
  "name": "node-rest-client",
  "description": "node API REST client",
  "version": "0.1.1",
  "repository": {
    "type": "git",
    "url": "https://github.com/aacerox/node-rest-client.git"
  },
  "main": "./lib/node-rest-client",
  "dependencies": {
    "xml2js": ">=0.2.4"
  },
  "devDependencies": {
    "jasmine-node": ">=1.2.3"
  },
  "optionalDependencies": {},
  "engines": {
    "node": "*"
  },
  "readme": "# REST Client for Node.js\n\nAllows connecting to any API REST and get results as js Object. The client has the following features:\n\n- Transparent HTTP/HTTPS connection to remote API sites.\n- Allows simple HTTP basic authentication.\n- Allows most common HTTP operations: GET, POST, PUT, DELETE.\n- Direct or through proxy connection to remote API sites.\n- Register remote API operations as client own methods, simplifying reuse.\n- Automatic parsing of XML and JSON response documents as js objects.\n- dynamic path and query parameters and request headers.\n\n\n## Installation\n\n$ npm install node-rest-client\n\n## Usages\n\n### Simple HTTP GET\n\nClient has 2 ways to call a REST service: direct or using registered methods\n\n```javascript\nvar Client = require('node-rest-client').Client;\n\nclient = new Client();\n\n// direct way\nclient.get(\"http://remote.site/rest/xml/method\", function(data, response){\n\t\t\t// parsed response body as js object\n\t\t\tconsole.log(data);\n\t\t\t// raw response\n\t\t\tconsole.log(response);\n\t\t});\n\n// registering remote methods\nclient.registerMethod(\"jsonMethod\", \"http://remote.site/rest/json/method\", \"GET\");\n\nclient.methods.jsonMethod(function(data,response){\n\t// parsed response body as js object\n\tconsole.log(data);\n\t// raw response\n\tconsole.log(response);\n});\n\n```\n\n\n### Passing args to registered methods\n\nYou can pass diferents args to registered methods, simplifying reuse: path replace parameters, query parameters, custom headers \n\n```javascript\nvar Client = require('node-rest-client').Client;\n\n// direct way\nclient = new Client();\n\nargs ={\n\t\tpath:{\"id\":120},\n\t\tparameters:{arg1:\"hello\",arg2:\"world\"},\n\t\theaders:{\"test-header\":\"client-api\"}\n\t  };\n\n\nclient.get(\"http://remote.site/rest/json/${id}/method?arg1=hello&arg2=world\", args, \n\t\t\tfunction(data, response){\n\t\t\t// parsed response body as js object\n\t\t\tconsole.log(data);\n\t\t\t// raw response\n\t\t\tconsole.log(response);\n});\n\n\n// registering remote methods\nclient.registerMethod(\"jsonMethod\", \"http://remote.site/rest/json/${id}/method\", \"GET\");\n\n\n\n/* this would construct the following URL before invocation\n *\n * http://remote.site/rest/json/120/method?arg1=hello&arg2=world\n *\n */ \nclient.methods.jsonMethod(args,function(data,response){\n\t// parsed response body as js object\n\tconsole.log(data);\n\t// raw response\n\tconsole.log(response);\n});\n\n```\n\nYou can even use path placeholders in query string in direct connection:\n\n```javascript\nvar Client = require('node-rest-client').Client;\n\n// direct way\nclient = new Client();\n\nargs ={\n\t\tpath:{\"id\":120,\"arg1\":\"hello\",\"arg2\":\"world\"},\n\t\tparameters:{arg1:\"hello\",arg2:\"world\"},\n\t\theaders:{\"test-header\":\"client-api\"}\n\t  };\n\nclient.get(\"http://remote.site/rest/json/${id}/method?arg1=${arg1}&arg2=${arg2}\", args, \n\t\tfunction(data, response){\n\t\t\t// parsed response body as js object\n\t\t\tconsole.log(data);\n\t\t\t// raw response\n\t\t\tconsole.log(response);\n});\n\n```\n\n\n\n###  HTTP POST and PUT methods\n\nTo send data to remote site using POST or PUT methods, just add a data attribute to args object:\n\n```javascript\nvar Client = require('node-rest-client').Client;\n\n// direct way\nclient = new Client();\n\nargs ={\n\t\tpath:{\"id\":120},\n\t\tparameters:{arg1:\"hello\",arg2:\"world\"},\n\t\theaders:{\"test-header\":\"client-api\"},\n\t\tdata:\"<xml><arg1>hello</arg1><arg2>world</arg2></xml>\"\n\t  };\n\nclient.post(\"http://remote.site/rest/xml/${id}/method?arg1=hello&arg2=world\", args, function(data, response){\n\t\t\t// parsed response body as js object\n\t\t\tconsole.log(data);\n\t\t\t// raw response\n\t\t\tconsole.log(response);\n});\n\n// registering remote methods\nclient.registerMethod(\"xmlMethod\", \"http://remote.site/rest/xml/${id}/method\", \"POST\");\n\n\nclient.methods.xmlMethod(args,function(data,response){\n\t// parsed response body as js object\n\tconsole.log(data);\n\t// raw response\n\tconsole.log(response);\n});\n\n// posted data can be js object\nargs_js ={\n\t\tpath:{\"id\":120},\n\t\tparameters:{arg1:\"hello\",arg2:\"world\"},\n\t\theaders:{\"test-header\":\"client-api\"},\n\t\tdata:{\"arg1\":\"hello\",\"arg2\":123}\n\t  };\n\nclient.methods.xmlMethod(args_js,function(data,response){\n\t// parsed response body as js object\n\tconsole.log(data);\n\t// raw response\n\tconsole.log(response);\n});\n\n```\n\n\n### Connect through proxy\n\nJust pass proxy configuration as option to client\n\n```javascript\nvar Client = require('node-rest-client').Client;\n\n// configure proxy\nvar options_proxy={\n\t\tproxy:{\n\t\t\thost:\"proxy.foo.com\",\n\t\t\tport:8080,\n\t\t\tuser:\"proxyuser\",\n\t\t\tpassword:\"123\"\n\t\t}\n\t},\n\nclient = new Client(options_proxy);\n\n```\n\n### Basic HTTP auth\n\nJust pass username and password as option to client. Every request done with the client will pass username and password as basic authorization header.\n\n```javascript\nvar Client = require('node-rest-client').Client;\n\n// configure basic http auth for every request\nvar options_auth={user:\"admin\",password:\"123\"};\n\nclient = new Client(options_auth);\n\n```\n\n### Options parameters\n\nYou can pass the following args when creating a new client:\n\n```javascript\n\nvar options ={\n\t// proxy configuration\n\tproxy:{\n\t\t\thost:\"proxy.foo.com\", // proxy host\n\t\t\tport:8080, // proxy port\n\t\t\tuser:\"ellen\", // proxy username if required\n\t\t\tpassword:\"ripley\" // proxy pass if required\n\t\t},\n\t// aditional connection options passed to node http.request y https.request methods \n\t// (ie: options to connect to IIS with SSL)\t\n\tconnection:{\t\n\t\tsecureOptions: constants.SSL_OP_NO_TLSv1_2,\n\t\tciphers:'ECDHE-RSA-AES256-SHA:AES256-SHA:RC4-SHA:RC4:HIGH:!MD5:!aNULL:!EDH:!AESGCM',\n\t\thonorCipherOrder: true\n\t},\n\t// customize mime types for json or xml connections\n\tmimetypes:{\n\t\tjson:[\"application/json\",\"application/json;charset=utf-8\"],\n\t\txml:[\"application/xml\",\"application/xml;charset=utf-8\"]\n\t},\t\n\tuser:\"admin\", // basic http auth username if required\n\tpassword:\"123\" // basic http auth password if required\n};\n\n```\n\n###  Error Handling\n\nClient can emits error events that can be handled like usually node does.\n\n```javascript\n\nclient = new Client(options_auth);\n\nclient.on('error',function(err){\n\tconsole.error('Something went wrong', err);\n});\n\n```",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/aacerox/node-rest-client/issues"
  },
  "_id": "node-rest-client@0.1.1",
  "_from": "node-rest-client@"
}
